
@inject SpinnerService SpinnerService

<style>
    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.5); /* Adjust the alpha (fourth value) to control transparency */
        z-index: 9999999; /* Place it below the spinner container */
        display: none; /* Initially hidden */
    }

    .spinner-overlay-visible {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .spinner-container {
        display: flex;
        flex-direction: column;
        position: fixed;
        z-index: 9999;
        top: 50%;
        left: 50%;
    }
</style>
@if (IsVisible)
{
   @*  <div class="spinner-overlay spinner-overlay-visible">
        <div class="spinner-container ">
            <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>

        </div>
    </div> *@

    <div class="spinner-overlay spinner-overlay-visible">
        <div class="spinner-container ">
            <div class="spinner-grow text-primary" style="width: 3rem; height: 3rem;" role="status">
            </div>
        </div>
    </div>
}

@code
{

    protected bool IsVisible { get; set; }

    protected override void OnInitialized()
    {
        SpinnerService.OnShow += ShowSpinner;
        SpinnerService.OnHide += HideSpinner;
    }

    public void ShowSpinner()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void HideSpinner()
    {
        IsVisible = false;
        StateHasChanged();
    }

    // Don't forget to unsubscribe when the component is disposed
    public void Dispose()
    {
        SpinnerService.OnShow -= ShowSpinner;
        SpinnerService.OnHide -= HideSpinner;
    }
}